javascript:(function() {    var styles = `        .EgoMenuHoverArea {            position: fixed;            bottom: 0;            left: 0;            width: 8vmax;            height: 8vmax;            background-color: transparent;            z-index: 9999;            transition: background-color 0.3s, width 0.3s, height 0.3s;        }        .EgoMenuContainer {            position: fixed;            bottom: -20vw;            left: 10px;            background-color: #333333b5;            border: 1vmin solid #444;            padding: 10px;            text-align: center;            z-index: 9999;            transition: bottom 0.3s;            color: #fff;            width: 25vmax;            border-radius: 5mm;            box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px;            backdrop-filter: blur(1.5vmin);        }        .EgoMenuContainer.active {            bottom: 1vw;            transform: rotate3d(1, 1, 1, 360deg);        }        .EgoMenuButton {            background-color: #3498db;            color: #fff;            border: none;            padding: 5px 10px;            cursor: pointer;            border-radius: 5px;            font-size: 14px;            margin: 5px;        }        .EgoMenuContainer.active + .EgoMenuHoverArea {            width: 15vmax;            height: 15vmax;        }        .EgoPopupContainer {            position: fixed;            bottom: -200px;            left: 10px;            padding: 10px;            width: 25vmax;            z-index: 9998;            transition: bottom 0.3s;            display: flex;            flex-direction: column;            align-items: center;            flex-wrap: nowrap;            align-content: center;            justify-content: center;        }        .EgoPopupContainer.active {            bottom: 15vmax;        }        .EgoPopup {            background-color: rgb(0 0 0 / 71%);            backdrop-filter: blur(1.5vmin);            color: #fff;            border: 1px solid #444;            padding: 10px;            width: 100%;            border-radius: 3mm;            box-shadow: rgba(255, 255, 255, 0.1) 0px 1px 1px 0px inset, rgba(50, 50, 93, 0.25) 0px 50px 100px 20px, rgba(0, 0, 0, 0.3) 0px 30px 60px 20px;        }        .EgoInput {            width: 90%;            padding: 2vmin;            margin-bottom: 10px;            background-color: grey;            border: black 1mm solid;            border-radius: 5mm;        }        .EgoSubmitButton {            background-color: #3498db;            color: #fff;            border: none;            padding: 5px 10px;            cursor: pointer;            border-radius: 5px;        }        .EgoCancelButton {            background-color: #e74c3c;            color: #fff;            border: none;            padding: 5px 10px;            cursor: pointer;            border-radius: 5px;        }        .EgoXButton {            background-color: #000000c9;            color: #fff;            border: none;            padding: 5px 10px;            cursor: pointer;            border-radius: 100%;            position: absolute;            right: -1vmin;            top: 0;        }        .EgoLogo {            background-image: url("https://cdn.glitch.global/efbbe251-937e-4c16-898c-cdfb9e3d65f4/fullLogo?v=1697857559723");            background-size: 8vmax;            background-repeat: no-repeat;            background-position: center;            height: 5vmax;            position: relative;            background-position-x: center;        }        .EgoSmallImage {            position: fixed;            bottom: 1vmin;            left: 1vmin;            background-image: url("https://cdn.glitch.global/efbbe251-937e-4c16-898c-cdfb9e3d65f4/smallE?v=1697857602944");            background-size: 95%;            background-repeat: no-repeat;            background-position: left;            width: 4vmax;            height: 4vmax;            display: none;            z-index: 999;        }        .EgoSwitchContainer {            display: flex;            justify-content: space-evenly;            flex-direction: row;            flex-wrap: wrap;            align-content: stretch;            align-items: center;            gap: 3mm;        }        .EgoSwitch {            display: inline-block;            position: relative;            width: 60px;            height: 34px;        }        .EgoSwitch input {            opacity: 0;            width: 0;            height: 0;        }        .EgoSwitch .slider {            position: absolute;            cursor: pointer;            top: 0;            left: 0;            right: 0;            bottom: 0;            background-color: #ccc;            -webkit-transition: .4s;            transition: .4s;            border-radius: 10mm;        }        .EgoSwitch .slider:before {            position: absolute;            content: "";            height: 26px;            width: 26px;            left: 4px;            bottom: 4px;            background-color: white;            -webkit-transition: .4s;            transition: .4s;            border-radius: 45mm;        }        .EgoSwitch input:checked + .slider {            background-color: #2196F3;        }        .EgoSwitch input:focus + .slider {            box-shadow: 0 0 1px #2196F3;        }        .EgoSwitch input:checked + .slider:before {            -webkit-transform: translateX(26px);            -ms-transform: translateX(26px);            transform: translateX(26px);        }        @keyframes slideOut {            from {                transform: translateX(0);            }            to {                transform: translateX(-100%);            }        }        .EgoCalculatorButtons {            display: grid;            grid-template-columns: repeat(4, 1fr);            grid-gap: 5px;            margin-top: 10px;        }        .EgoCalculatorButtons button {            padding: 1vmin;            font-size: 3vmin;            text-align: center;        }        .EgoCalculatorButtons button.operators {            background-color: orange;            border-radius: 25mm;            border: .2vmin black solid;        }        .EgoCalculatorButtons button.numbers {            background-color: black;            color: white;            border-radius: 25mm;            border: .2vmin solid white;        }    %60;    var styleSheet = document.createElement("style");    styleSheet.type = "text/css";    styleSheet.innerText = styles;    document.head.appendChild(styleSheet);    var hoverArea = document.createElement("div");    hoverArea.className = "EgoMenuHoverArea";    var menuContainer = document.createElement("div");    menuContainer.className = "EgoMenuContainer";    var menuContent = document.createElement("div");    menuContent.innerHTML = %60    <h2 class="EgoLogo"></h2>    <button class="EgoMenuButton" id="floodingOption">Flood History</button>    <button class="EgoMenuButton" id="calculatorOption">Calculator</button>    <div class="EgoSwitchContainer">        <label class="EgoSwitch">            <input type="checkbox" id="editPageSwitch">            <span class="slider round"></span>        </label>        Edit Page        <label class="EgoSwitch">        <input type="checkbox" id="toggleCheckbox">        <span class="slider round"></span>    </label>    Show logo    </div>    <button class="EgoMenuButton" id="fetchButton">EdPuzzle Hacks</button>    <button class="EgoMenuButton" id="unblockedYouTube">Unblocked YouTube</button>    %60;            menuContainer.appendChild(menuContent);    document.body.appendChild(hoverArea);    document.body.appendChild(menuContainer);    var smallImage = document.createElement("div");    smallImage.className = "EgoSmallImage";    document.body.appendChild(smallImage);    var showSmallImage = false;    smallImage.addEventListener("click", function() {        showSmallImage = !showSmallImage;        smallImage.style.display = showSmallImage ? "block" : "none";    });    var toggleCheckbox = document.getElementById("toggleCheckbox");    toggleCheckbox.addEventListener("change", function() {        showSmallImage = toggleCheckbox.checked;        smallImage.style.display = showSmallImage ? "block" : "none";    });    var popupContainer = document.createElement("div");    popupContainer.className = "EgoPopupContainer";    document.body.appendChild(popupContainer);        var currentPopup = null;    var currentPopupContent = null;    var menuCloseTimer;    var closePopup = function() {        if (currentPopup) {            currentPopup.style.animation = "slideOut 0.3s";            currentPopup.addEventListener("animationend", function() {                popupContainer.removeChild(currentPopup);                currentPopup = null;                currentPopupContent = null;                popupContainer.classList.remove("active");            });        }    };    var togglePopup = function(content) {        if (currentPopupContent === content) {            closePopup();        } else if (currentPopup) {            closePopup();            setTimeout(function() {                createPopup(content);            }, 400);        } else {            createPopup(content);        }    };    var createPopup = function(content) {        var popup = document.createElement("div");        popup.className = "EgoPopup";        popup.innerHTML = content;        var popupCloseButton = document.createElement("button");        popupCloseButton.className = "EgoXButton";        popupCloseButton.innerText = "X";        popupCloseButton.addEventListener("click", function() {            closePopup();        });        popup.appendChild(popupCloseButton);        popupContainer.appendChild(popup);        currentPopup = popup;        currentPopupContent = content;        setTimeout(function() {            popupContainer.classList.add("active");        }, 0);    };    hoverArea.addEventListener("mouseenter", function() {        clearTimeout(menuCloseTimer);        menuContainer.classList.add("active");    });    hoverArea.addEventListener("mouseleave", function() {        if (!menuContainer.contains(event.relatedTarget)) {            menuCloseTimer = setTimeout(function() {                menuContainer.classList.remove("active");                if (!currentPopup || !popupContainer.contains(currentPopup)) {                    closePopup();                }            }, 1000);        }    });    menuContainer.addEventListener("mouseenter", function() {        clearTimeout(menuCloseTimer);    });    menuContainer.addEventListener("mouseleave", function() {        menuCloseTimer = setTimeout(function() {            menuContainer.classList.remove("active");            if (!currentPopup || !popupContainer.contains(currentPopup)) {                closePopup();            }        }, 1000);    });    document.getElementById("floodingOption").addEventListener("click", function() {        var content = %60            <h2>Flood History</h2>            <label for="numOfTimes">How many times do you want this page to show up in your history?</label>            <label for="numOfTimes">(higher numbers might take longer)</label>            <input type="number" id="numOfTimes" class="EgoInput">            <br>            <button id="submitFlood" class="EgoSubmitButton">Submit</button>        %60;        togglePopup(content);        var submitButton = document.getElementById("submitFlood");        var inputField = document.getElementById("numOfTimes");        var cancelButton = document.getElementById("cancelFlood");        submitButton.addEventListener("click", function() {            var num = inputField.value;            if (!isNaN(num) && num > 0) {                var x = window.location.href;                var done = false;                for (var i = 1; i <= num; i++) {                    history.pushState(0, 0, i === num ? x : i.toString());                    if (i === num) {                        done = true;                    }                }                if (done) {                    var successPopup = document.createElement("div");                    successPopup.className = "EgoPopup";                    successPopup.innerHTML = %60History Flooding Successful! <br> ${window.location.href} <br> Now Appears In Your History ${num}${num === 1 ? " time." : " Times."} <br> Made By: Utopia%60;                    popupContainer.appendChild(successPopup);                }                closePopup();            }        });    });        document.getElementById("calculatorOption").addEventListener("click", function() {        var content = %60            <h2>Calculator</h2>            <input type="text" id="calcInput" class="EgoInput">            <div class="EgoCalculatorButtons">                <button class="numbers" id="btn7">7</button>                <button class="numbers" id="btn8">8</button>                <button class="numbers" id="btn9">9</button>                <button class="operators" id="btnAdd">+</button>                <button class="numbers" id="btn4">4</button>                <button class="numbers" id="btn5">5</button>                <button class="numbers" id="btn6">6</button>                <button class="operators" id="btnSubtract">-</button>                <button class="numbers" id="btn1">1</button>                <button class="numbers" id="btn2">2</button>                <button class="numbers" id="btn3">3</button>                <button class="operators" id="btnMultiply">*</button>                <button class="numbers" id="btn0">0</button>                <button class="EgoCancelButton" id="btnClear">C</button>                <button class="operators" id="btnEquals">=</button>                <button class="operators" id="btnDivide">/</button>            </div>        %60;            togglePopup(content);            var calcInput = document.getElementById("calcInput");        var calculatorButtons = document.querySelectorAll(".EgoCalculatorButtons button");            calculatorButtons.forEach(function(button) {            button.addEventListener("click", function() {                var inputValue = calcInput.value;                    if (button.id === "btnClear") {                    calcInput.value = "";                } else if (button.id === "btnEquals") {                    try {                        var result = eval(inputValue);                        calcInput.value = result;                    } catch (error) {                        calcInput.value = "Error";                    }                } else {                    calcInput.value = inputValue + button.textContent;                }            });        });    });            var editPageSwitch = document.getElementById("editPageSwitch");    editPageSwitch.addEventListener("change", function() {        if (editPageSwitch.checked) {            document.body.contentEditable = 'true';            document.designMode = 'on';            console.log("ON")        } else {            document.body.contentEditable = 'false';            document.designMode = 'off';            console.log("OFF")        }    });    var fetchButton = document.getElementById("fetchButton");    fetchButton.addEventListener("click", function() {        fetch("https://cdn.jsdelivr.net/gh/ading2210/edpuzzle-answers@latest/script.js")            .then(r => r.text())            .then(r => eval(r));    });    window.stealthEngineLoaded = true;    function stealthEngine(encodedURL) {        let inFrame;        try {            inFrame = window !== top;        } catch (e) {            inFrame = true;        }        setTimeout(() => {            if (!inFrame && !navigator.userAgent.includes("Firefox")) {                const popup = open("about:blank", "_blank");                if (!popup || popup.closed) {                    alert("StealthEngine was unable to open a popup. (Do you have popups disabled?)");                } else {                    const doc = popup.document;                    const iframe = doc.createElement("iframe");                    const style = iframe.style;                    popup.onload = () => {                        document.getElementById("lpoader").style.display = "none";                        document.getElementById("connectorText").textContent = "connecting to service";                        setTimeout(() => {                            document.getElementById("connectorText").textContent = "connecting to service";                        }, 17500);                    };                    var isClosed = setInterval(function () {                        if (popup.closed) {                            clearInterval(isClosed);                            document.getElementById("lpoader").style.display = "none";                            document.getElementById("connectorText").textContent = "connecting to service";                        }                    }, 1000);                    const img = doc.createElement("link");                    const arcSrc = doc.createElement("script");                    arcSrc.setAttribute("src", "https://arc.io/widget.min.js#BgaWcYfi");                    arcSrc.setAttribute("async", "");                    doc.head.appendChild(arcSrc);                    const link = location.href;                    img.rel = "icon";                    img.href = ABFavicon || "https://ssl.gstatic.com/images/branding/product/1x/drive_2020q4_32dp.png";                    if (localStorage.nogg == "on") {                        doc.title = ABTitle || getRandomName();                    } else {                        doc.title = ABTitle || "Nebula";                    }                    var currentLink = link.slice(0, link.length - 1);                    iframe.src = encodedURL;                    style.position = "fixed";                    style.top = style.bottom = style.left = style.right = 0;                    style.border = style.outline = "none";                    style.width = style.height = "100%";                    doc.body.appendChild(iframe);                    doc.head.appendChild(img);                }            }        }, 1500);    }        let tryAbFavi = localStorage.getItem("ABfaviconURL");    let ABFavicon = "";    if (tryAbFavi === null) {        console.warn("ABfaviconURL is null, Defaulting");        ABFavicon = "";    } else if (tryAbFavi == "") {        console.warn("ABfaviconURL is empty, Defaulting");        ABFavicon = "";    } else {        ABFavicon = tryAbFavi;    }        let tryAbTitle = localStorage.getItem("ABtitle");    let ABTitle = "";    if (tryAbTitle === null) {        console.warn("ABtitle is null, Defaulting");        ABTitle = "";    } else if (tryAbTitle == "") {        console.warn("ABtitle is empty, Defaulting");        ABTitle = "";    } else {        ABTitle = tryAbTitle;    }        document.getElementById("unblockedYouTube").addEventListener("click", function() {        stealthEngine("https://piped.kavin.rocks/");    });        })();
